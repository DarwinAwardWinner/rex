density
?density
my_regex <- rex( capture(
if_prev_is( start %or% " " ),
word("ab") %of_length% c(2, 4),
if_next_is( end %or% " " )
) )
gsub( my_regex, "\\1_is_matched", "abab abaab ababa ABab ababab", perl=TRUE)
my_regex <- rex( named_capture( name="hi",
word("xyz") %if_next_is% "K"
) )
gsub( my_regex, "\\hi", "xyz xyzk xyzK", perl=TRUE )
?roxygen2
library(roxygen2)
?roxygen2
??roxygen
library(rex)
?rex
install.packages("Kmisc")
library(Kmisc)
Kmisc:::.__NAMESPACE__.
as.list( Kmisc:::.__NAMESPACE__. )
str_split("a.b^c", "[.^]" )
install.packages("Kmisc", type="source")
install.packages("Kmisc", type = "source")
library(Kmisc)
library(rex)
x <- "http://stat.umn.edu:80/xyz"
mm <- "^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)"
m <- regexec("^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)", x)
my_regex <- rex(
## match the protocol -- may exist or may not
start, zero_or_one( named_capture( "protocol",
capture( one_or_more("[^:]") ),
"://"
) ),
## match the whole thing
capture(
one_or_more(
not(":/")
)
),
##
zero_or_one( capture(
":", capture(
one_or_more( numbers )
)
)
),
capture( zero_or_more("/.") )
)
n <- regexec( my_regex, x )
regmatches( x, regexec(my_regex, x) )
devtools::load_all()
x <- "http://stat.umn.edu:80/xyz"
mm <- "^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)"
m <- regexec("^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)", x)
my_regex <- rex(
## match the protocol -- may exist or may not
start, zero_or_one( named_capture( "protocol",
capture( one_or_more("[^:]") ),
"://"
) ),
## match the whole thing
capture(
one_or_more(
not(":/")
)
),
##
zero_or_one( capture(
":", capture(
one_or_more( numbers )
)
)
),
capture( zero_or_more("/.") )
)
n <- regexec( my_regex, x )
regmatches( x, regexec(my_regex, x) )
example("%of_length%")
library(rex)
rex
example(rex)
rex( start)
rex( starts_with("foo") )
rex( starts_with( zero_or_more("foo") ) )
rex( zero_or_more("foo") )
library(rex)
rex( zero_or_more("foo") )
rex( zero_or_more("foo") )
library(rex)
rex( zero_or_more("foo") )
grep( rex( zero_or_more("foo") ), "foofoofoo" )
rex( zero_or_more("foo") * "bar" )
rex( zero_or_more("foo"), "bar"
)
library(rex)
rex( starts_with("foo"), capture("bar"), ends_with("baz") )
## Decompose a URL into its components.
x <- "http://stat.umn.edu:80/xyz"
mm <- "^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)"
m <- regexec("^(([^:]+)://)?([^:/]+)(:([0-9]+))?(/.*)", x)
my_regex <- rex(
## match the protocol -- may exist or may not
start, zero_or_one( named_capture( "protocol",
capture( one_or_more("[^:]") ),
"://"
) ),
## match the whole thing
capture(
one_or_more(
not(":/")
)
),
##
zero_or_one( capture(
":", capture(
one_or_more( numbers )
)
)
),
capture( zero_or_more("/.") )
)
rex( "foo" %or% "bar" )
rex( "foo", if_next_is("bar") )
grep( rex( "foo", if_next_is("bar") ), "foobar", perl=TRUE )
grep( rex( "foo", if_next_is("bar") ), "foo", perl=TRUE )
rex("foo", if_prev_isnt("bar"))
capture( one_or_more("foo") )
capture( one_or_more(word) )
capture( one_or_more(char) )
capture( one_or_more("\w") )
capture( one_or_more("\\w") )
rex( one_or_more(char) )
rex( one_or_more( capture(char) ) )
?regex
rex( whitespace * 3 )
rex( whitespace %of_length% 3 )
rex( whitespace %of_length% c(3, 10) )
rex( word("ab") )
rex( word("ab") %of_length% c(2, 4) )
example("%of_length$")
example("%of_length%")
example(%of_length%)
?"%of_length"
?"%of_length%"
one_or_more("foo")
zero_or_more <- function(...) {
p("(?:", ..., ")*")
}
one_or_more <- function(...) {
p("(?:", ..., ")+")
}
zero_or_one <- function(...) {
p("(?:", ..., ")?")
}
zero_or_one("foo")
rex( zero_or_one("foo"), one_or_more("bar"), one_or_more("baz") )
library(rex)
rex( zero_or_one("foo"), one_or_more("bar"), one_or_more("baz") )
pt <- rex( zero_or_one("foo"), one_or_more("bar"), one_or_more("baz") )
grep(pt, "foobarbaz")
grep(pt, "foobarbarbaz")
grep(pt, "foobarbarbazbazbazfoo")
grep(pt, "barbaz")
grep(pt, "baz")
grep(pt, "foofoobarbaz")
library(rex)
gsub( rex( one_or_more(space), capture( one_or_more(word) ), one_or_more(space) ) )
gsub( rex( one_or_more(space), capture( one_or_more(word) ), one_or_more(space) ), "foo bar baz" )
gsub( rex( one_or_more(space), capture( one_or_more(word) ), one_or_more(space) ), "\\1", "foo bar baz" )
library(rex)
gsub( rex( one_or_more(space), capture( one_or_more(word) ), one_or_more(space) ), "\\1", "foo bar baz" )
rex( one_or_more(space), capture( one_or_more(word) ), one_or_more(space) )
gsub( rex( one_or_more(space), capture( one_or_more(word) ), one_or_more(space) ), "\\1", "foo bar baz", perl=TRUE )
gsub( rex( one_or_more(space), capture( one_or_more(word) ), one_or_more(space) ), "\\2", "foo bar baz", perl=TRUE )
gsub( rex( one_or_more(space), capture( one_or_more(word) ), one_or_more(space) ), "\\3", "foo bar baz", perl=TRUE )
gsub( rex( one_or_more(space), capture( one_or_more(word) ), one_or_more(space) ), "", "foo bar baz", perl=TRUE )
gsub( rex( one_or_more(space), capture( one_or_more(word) ), one_or_more(space) ), "\\1", "foo bar baz", perl=TRUE )
rex( one_or_more(space), capture( one_or_more(word) ), one_or_more(space) )
rex( one_or_more(space), capture( one_or_more(word) ), one_or_more(space) ) -> pattern
pattern
rex()
rex("foo")
rex( one_or_more("foo") )
rex( one_or_more("foo"), capture(word) )
pt <- rex( one_or_more("foo"), capture(word) )
gsub(pt, "\\1", "foobar")
gsub(pt, "\\1", "foobar", pattern=TRUE)
gsub(pt, "\\1", "foobar", perl=TRUE)
gsub(pt, "\\2", "foobar", perl=TRUE)
gsub(pt, "\\3", "foobar", perl=TRUE)
gsub(pt, "\\0", "foobar", perl=TRUE)
gsub(pt, "\0", "foobar", perl=TRUE)
gsub(pt, "\\1", "foobar", perl=TRUE)
gsub(pt, "\\1", "foobar", perl=TRUE)
pt
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl=TRUE)
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl=TRUE)
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
pt
gsub(pt, "\\1", "foobar", perl=TRUE)
pt <- rex( one_or_more("foo"), capture(word), ".*" )
pt
gsub(pt, "\\1", "foobar", perl=TRUE)
library(rex)
library(rex)
library(rex)
rex()
rex( named_capture("firstWord", letters), spaces, named_capture("secondWord"), spaces, named_capture("thirdWord"), spaces )
pattern <- rex( named_capture("firstWord", letters), spaces, named_capture("secondWord"), spaces, named_capture("thirdWord"), spaces )
pattern
gsub(pattern, "\\firstWord", "foo bar baz")
gsub(pattern, "\firstWord", "foo bar baz")
pattern
pattern <- rex( named_capture("firstWord", letters), spaces, named_capture("secondWord", letters), spaces, named_capture("thirdWord", letters), spaces )
gsub(pattern, "\firstWord", "foo bar baz")
gsub(pattern, "\\firstWord", "foo bar baz")
pattern
gsub(pattern, "\\firstWord", "foo bar baz", perl=TRUE)
gsub(pattern, "\\secondWord", "foo bar baz", perl=TRUE)
gsub(pattern, "\\1", "foo bar baz", perl=TRUE)
gsub(pattern, "\\3", "foo bar baz", perl=TRUE)
gsub(pattern, "\\5", "foo bar baz", perl=TRUE)
pattern
library(rex)
gsub(pattern, "\\5", "foo bar baz", perl=TRUE)
pattern <- rex( named_capture("firstWord", letters), spaces, named_capture("secondWord", letters), spaces, named_capture("thirdWord", letters), spaces )
pattern
gsub(pattern, "\\5", "foo bar baz", perl=TRUE)
gsub(pattern, "\\2", "foo bar baz", perl=TRUE)
pattern <- rex( capture(words), spaces, capture(words), spaces )
pattern <- rex( capture(letters), spaces, capture(letters), spaces )
pattern
gsub(pattern, "\\1", "foo bar", perl=TRUE)
gsub(pattern, "\\2", "foo bar", perl=TRUE)
pattern <- rex( capture(letters), spaces, capture(letters), spaces )
gsub(pattern, "\\2", "foo bar", perl=TRUE)
gsub(pattern, "\\2", "foo bar baz", perl=TRUE)
gsub(pattern, "\\1", "foo bar baz", perl=TRUE)
pattern <- rex( capture(letters), spaces, capture(letters), spaces, ".*" )
gsub(pattern, "\\1", "foo bar baz", perl=TRUE)
gsub(pattern, "\\2", "foo bar baz", perl=TRUE)
pattern
library(rex)
pattern <- rex( capture(letters), spaces, capture(letters), spaces, ".*" )
gsub(pattern, "\\2", "foo bar baz", perl=TRUE)
gsub(pattern, "\\1", "foo bar baz", perl=TRUE)
pattern <- rex( capture(letters), spaces, capture(letters), spaces )
gsub(pattern, "\\1", "foo bar baz", perl=TRUE)
pattern
named_capture <- .. <- function( name, ... ) {
p( "(?<", name, ">", ..., ")" )
}
..("foo", "bar")
"foo" %if_prev_is% "bar"
library(rex)
"foo" %if_prev_is% "bar"
library(rex)
example(rex)
?rex
rex( start)
rex(start, zero_or_more(spaces), )
rex(start, zero_or_more(spaces) )
rex(start, zero_or_more(spaces))
rex(start, zero_or_more(spaces), .(letters))
pattern <- rex(start, zero_or_more(spaces), .(letters))
gsub(pattern, "\\1", "  \tfoo")
example(char)
char()
##' @export
n_times <- function(x, n) {
p("(?:", x, "){", n, "}")
}
library(rex)
n_times("foo")
n_times("foo", 1)
n_times("foo", 5)
rex( n_times("foo", 5), .(letters) )
pt <- rex( n_times("foo", 5), .(letters) )
gsub(pt, "\\1", "foofoofoofoofoobar")
gsub(pt, "\\1", "foofoofoofoobar")
pt
gsub(pt, "\\1", "foofoofoobar")
gsub(pt, "\\2", "foofoofoobar")
gsub(pt, "\\0", "foofoofoobar")
gsub(pt, "\\1", "foofoofoobar")
gsub(pt, "\\1", "foofoofoobar", perl=TRUE)
pt
pt <- rex( .(letters) %if_prev_is% n_times("foo", 5) )
pt
gsub(pt, "\\1", "foo")
gsub(pt, "\\1", "foo")
gsub(pt, "\\1", "foo", perl=TRUE)
gsub(pt, "\\1", "foofoofoobar", perl=TRUE)
gsub(pt, "\\1", "foofoofoofoofoobar", perl=TRUE)
gsub(pt, "\\1", "foofoofoofoofoobarbar", perl=TRUE)
gsub( paste0(".*?", pt), "\\1", "foofoofoofoofoobarbar", perl=TRUE)
gsub( paste0(".*?", pt), "\\1", "foofoofoofoobarbar", perl=TRUE)
gsub( paste0(".*", pt), "\\1", "foofoofoofoobarbar", perl=TRUE)
gsub( paste0(".*?", pt), "\\1", "foofoofoofoobarbar", perl=TRUE)
pt
one_or_more
pt
rex( n_times("foo", 5), .(letters) )
pt <- rex( n_times("foo", 5), .(letters) )
gsub(pt, "\\1", "foofoofoofoofoobar", perl=TRUE)
gsub(pt, "\\1", "foofoofoofoofoobar baz", perl=TRUE)
gsub(pt, "\\1", "foofoofoofoofoobarbaz baz", perl=TRUE)
gsub(pt, "\\1", "foofoofoofoofoofoobarbaz baz", perl=TRUE)
library(rex)
rex( "foo" %if_next_isnt% "bar" )
gsub( rex( .("foo") %if_next_isnt% "bar" ), "\\1",
gsub( rex( .("foo") %if_next_isnt% "bar" ), "\\1", "foobar" )
gsub( rex( .("foo") %if_next_isnt% "bar" ), "\\1", "foobar", perl=TRUE )
gsub( rex( .("foo") %if_next_isnt% "bar" ), "\\1", "bar", perl=TRUE )
gsub( rex( .("foo") %if_next_isnt% "bar" ), "\\1", "foo foobar foobarbaz", perl=TRUE )
gsub( rex( .("foo") %if_next_isnt% "bar" ), "\\1", "fo foobar foobarbaz", perl=TRUE )
gsub( rex( ".*", .("foo") %if_next_isnt% "bar" ), "\\1", "fo foobar foobarbaz", perl=TRUE )
gsub( p <- rex( .("foo") %if_next_isnt% "bar" ), "\\1", "fo foobar foobarbaz", perl=TRUE )
p
rex( .(letters), spaces )
fibonacci <- function(n) {
if (n < 2) return(1)
return( fibonacci(n-1) + fibonacci(n-2) )
}
fibonacci(1)
fibonacci(3)
fibonacci(4)
fibonacci(5)
fibonacci(6)
fibonacci(20)
fibonacci(50)
memo <- list(1, 2)
memo
fibonacci <- function(n) {
memo <- list(1, 2)
if (is.null(memo[[n]])) {
memo[[n]] <- fibonacci(n-1) + fibonacci(n-2)
} else {
return( memo[[n]] )
}
}
fibonacci(1)
fibonacci(5)
memo <- list(1, 2)
memo[[3]] <- "foo"
memo
memo[[5]]
memo[5]
source('~/.active-rstudio-document')
fibonacci(5)
source('~/.active-rstudio-document')
fibonacci(5)
fibonacci(20)
fibonacci(40)
source('~/.active-rstudio-document')
fibonacci(5)
source('~/.active-rstudio-document')
fibonacci(5)
fibonacci(20)
fibonacci <- function(n) {
memo <- list(1, 2)
i <- 3
while (i <= n) {
memo[[i]] <- fibonacci(i-1) + fibonacci(i-2)
i <- i + 1
}
return( memo[[n]] )
}
fibonacci(20)
Fibonacci <- function(n) {
memo <- list(1, 2)
fibonacci <- function(n) {
if (memo[n] == list(NULL)) {
memo[[n]] <- fibonacci(n-1) + fibonacci(n-2)
}
return( memo[[n]] )
}
return( fibonacci(n) )
}
Fibonacci(5)
memo[[5]]
memo[5]
memo[5] == list(NULL)
Fibonacci <- function(n) {
memo <- list(1, 2)
fibonacci <- function(n) {
if (is.null( memo[n][[1]] )) {
memo[[n]] <- fibonacci(n-1) + fibonacci(n-2)
}
return( memo[[n]] )
}
return( fibonacci(n) )
}
Fibonacci(5)
Fibonacci(10)
Fibonacci(20)
Fibonacci(30)
Fibonacci(31)
Fibonacci(31)
Fibonacci <- function() {
memo <- list(1, 2)
fibonacci <- function(n) {
if (is.null( memo[n][[1]] )) {
memo[[n]] <- fibonacci(n-1) + fibonacci(n-2)
}
return( memo[[n]] )
}
return( function(n) {
fibonacci(n)
})
}
fib <- Fibonacci()
fib
fib(2)
fib(5)
fib(4)
fib(10)
fib(10)
fib(20)
fib(20)
fib(40)
fib(30)
fib(30)
fib(30)
environment(fib)
object( environment(fib) )
objects( environment(fib) )
get("memo", environment(fib) )
Fibonacci <- function() {
memo <- list(1, 2)
fibonacci <- function(n) {
if (is.null( memo[n][[1]] )) {
memo[[n]] <<- fibonacci(n-1) + fibonacci(n-2)
}
return( memo[[n]] )
}
return( function(n) {
fibonacci(n)
})
}
fib <- Fibonacci()
fib(5)
get("memo", environment(fib))
fib(20)
fib(30)
fib(40)
fib(60)
fib(80)
fib(100)
fib(200)
source('~/memoise/R/memoise.r')
install.packages("memoise")
install.packages("memoise")
install.packages("memoise")
library(memoise)
rm(list=ls())
fib <- function(n) {
if (n < 2) return(1)
return (fib(n-1) + fib(n-2))
}
fib(3)
memoise(fib)
fibm <- memoise(fib)
fibm
fibm(3)
fibm(5)
fibm(20)
fibm(200)
fibm(30)
fibm(30)
memoizer <- function(memo, f) {  return( function(n) {    if (!is.null(memo[n][[1]])) {      memo[[n]] <<- f(shell, n)    }    return(memo[[n]])  })}
memoizer <- function(memo, f) {  shell <- function(n) {    if (!is.null(memo[n][[1]])) {      memo[[n]] <<- f(shell, n)    }    return(memo[[n]])  }  return(shell)}
memoizer <- function(memo, f) {  shell <- function(n) {    if (!is.null(memo[n][[1]])) {      memo[[n]] <<- f(shell, n)    }    return(memo[[n]])  }  return(shell)}
memoizer <- function(memo, f) {
shell <- function(n) {
if (!is.null(memo[n][[1]])) {
memo[[n]] <<- f(shell, n)
}
return(memo[[n]])
}
return(shell)
}
memoizer
library(parallel)
example(mclapply)
?mclapply
simplify2array(mclapply(rep(4, 5), rnorm))
set.seed(1)
simplify2array(mclapply(rep(4, 5), rnorm, mc.preschedule = FALSE,
mc.set.seed = FALSE))
set.seed(1)
simplify2array(mclapply(rep(4, 5), rnorm, mc.preschedule = FALSE,
mc.set.seed = FALSE))
set.seed(1)
simplify2array(mclapply(rep(4, 5), rnorm, mc.preschedule = FALSE,
mc.set.seed = FALSE))
simplify2array(mclapply(rep(4, 5), rnorm))
simplify2array(mclapply(rep(4, 5), rnorm))
simplify2array(mclapply(rep(4, 5), rnorm))
simplify2array(mclapply(rep(4, 5), rnorm))
simplify2array(mclapply(rep(4, 5), rnorm))
simplify2array(mclapply(rep(4, 5), rnorm))
simplify2array(mclapply(rep(4, 5), rnorm))
simplify2array(mclapply(rep(4, 5), rnorm))
simplify2array(mclapply(rep(4, 5), rnorm, mc.preschedule = FALSE,
mc.set.seed = FALSE))
